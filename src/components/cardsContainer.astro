---
import Card from "./Card.astro";

const ITEMS_PER_PAGE = 12;
const TOTAL_POKEMONS = 151;

// Fetch initial Pokémon data
async function fetchPokemonData(start: number, limit: number) {
  try {
    const pokemons = [];
    for (let i = start; i < start + limit && i <= TOTAL_POKEMONS; i++) {
      const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${i}`);
      const data = await response.json();

      pokemons.push({
        id: data.id,
        name: data.name.charAt(0).toUpperCase() + data.name.slice(1),
        image:
          data.sprites.other["official-artwork"].front_default ||
          data.sprites.front_default,
        type: data.types.map((type) => type.type.name),
      });
    }
    return pokemons;
  } catch (error) {
    console.error("Error fetching Pokemon data:", error);
    return [];
  }
}
// Initial fetch of first 12 Pokémon
const initialPokemons = await fetchPokemonData(1, ITEMS_PER_PAGE);

async function fetchPokemonType() {
  try {
    const response = await fetch(`https://pokeapi.co/api/v2/type`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching Pokemon data:", error);
    return null;
  }
}
const activeType = "all";
const pokemonData = await fetchPokemonType();
---

<section
  id="typeGrid"
  class="container mx-auto px-12 py-8 mt-8 shadow-lg rounded-3xl border border-gray-400 border-opacity-10 flex flex-row justify-between items-center"
>
  <div class="flex flex-col space-y-4 items-center">
    <h2 class="text-2xl font-semibold tracking-wider">Tipos</h2>
    <div class="relative inline-block text-left">
      <!-- Button that toggles the dropdown -->
      <button
        id="dropdown-toggle"
        class="inline-flex capitalize justify-between items-center gap-x-3 w-60 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
      >
        <img
          id="dropdown-general-image"
          class="h-8 w-auto"
          src="/img/types_icons/todos.png"
        />
        <span>Seleccionar tipo</span>
        <svg
          class="w-5 h-5 ml-2 -mr-1"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fill-rule="evenodd"
            d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
            clip-rule="evenodd"></path>
        </svg>
      </button>

      <!-- Dropdown menu -->
      <div
        id="options-menu"
        class="hidden z-50 absolute right-0 w-60 h-52 overflow-y-scroll mt-2 origin-top-right bg-white rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
      >
        <div class="py-1">
          <button
            class="option-btn w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-all duration-100 flex flex-row items-center"
          >
            <img class="h-8 w-auto" src={`img/types_icons/todos.png`} />
            <span class="pl-3">Todos</span>
          </button>
          {
            pokemonData.results.map((type) => {
              const typeTranslations = {
                normal: "normal",
                fighting: "lucha",
                flying: "volador",
                poison: "veneno",
                ground: "tierra",
                rock: "roca",
                bug: "bicho",
                ghost: "fantasma",
                steel: "acero",
                fire: "fuego",
                water: "agua",
                grass: "planta",
                electric: "eléctrico",
                psychic: "psíquico",
                ice: "hielo",
                dragon: "dragón",
                dark: "siniestro",
                fairy: "hada",
              };

              return (
                <button class="option-btn w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 transition-all duration-100 flex flex-row items-center">
                  <img
                    class="h-8 w-auto"
                    src={`/img/types_icons/${type.name}.png`}
                  />
                  <span class="pl-3 capitalize" id={type.name}>
                    {typeTranslations[type.name] || type.name}
                  </span>
                </button>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>
</section>

<section class="container mx-auto px-4 py-8">
  <div
    id="pokemonGrid"
    class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4"
  >
    {
      initialPokemons.map((pokemon) => (
        <div class="pokemon-card w-full h-full p-2">
          <Card
            id={pokemon.id}
            name={pokemon.name}
            image={pokemon.image}
            type={pokemon.type}
          />
        </div>
      ))
    }
  </div>

  {
    initialPokemons.length < TOTAL_POKEMONS && (
      <div class="text-center mt-8">
        <button
          id="loadMore"
          class="group border-none flex flex-row mx-auto items-center justify-center"
        >
          <img
            src="/img/logos/smallLogo.png"
            alt="Cargar más"
            class="h-24 group-hover:scale-110 group-hover:ml-0 ml-32 lg:ml-36  transition-all duration-110"
          />
          <span class="text-2xl pl-3 opacity-0 group-hover:opacity-100 group-hover:animate-fade-in-right transition-all duration-110">
            Cargar más
          </span>
        </button>
      </div>
    )
  }
</section>

<style>
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  #loadMore.loading img {
    animation: spin 1s linear infinite;
  }

  /* Disable hover effect while loading */
  #loadMore.loading img:hover {
    transform: none;
  }
</style>

<script>
  const ITEMS_PER_PAGE = 12;
  const TOTAL_POKEMONS = 151;
  const typeGrid = document.getElementById("typeGrid");
  let activeType = "all";
  let currentPage = 1;

  const typeTranslations = {
    normal: "normal",
    fighting: "lucha",
    flying: "volador",
    poison: "veneno",
    ground: "tierra",
    rock: "roca",
    bug: "bicho",
    ghost: "fantasma",
    steel: "acero",
    fire: "fuego",
    water: "agua",
    grass: "planta",
    electric: "eléctrico",
    psychic: "psíquico",
    ice: "hielo",
    dragon: "dragón",
    dark: "siniestro",
    fairy: "hada",
  };

  const typeGradients = {
    normal: "from-gray-400 to-gray-500",
    lucha: "from-red-600 to-red-700",
    volador: "from-blue-300 to-gray-300",
    veneno: "from-purple-500 to-purple-700",
    tierra: "from-yellow-600 to-yellow-700",
    roca: "from-gray-500 to-yellow-600",
    bicho: "from-green-400 to-green-600",
    fantasma: "from-purple-600 to-indigo-700",
    acero: "from-gray-400 to-gray-600",
    fuego: "from-orange-500 to-red-600",
    agua: "from-blue-400 to-blue-600",
    planta: "from-green-400 to-green-700",
    eléctrico: "from-yellow-300 to-yellow-500",
    psíquico: "from-pink-400 to-pink-600",
    hielo: "from-blue-200 to-blue-400",
    dragón: "from-purple-500 to-red-500",
    siniestro: "from-gray-700 to-gray-900",
    hada: "from-pink-300 to-pink-500",
  };

  // DOM Elements
  const loadMoreButton = document.querySelector(
    "#loadMore"
  ) as HTMLButtonElement;
  const pokemonGrid = document.getElementById("pokemonGrid");

  if (typeGrid) {
    const typeButtons = typeGrid.querySelectorAll("button");

    // Add click event listeners to all type buttons
    typeButtons.forEach((button) => {
      // Set initial active state for "all" button
      if (button.querySelector("img")?.src.includes("todos.png")) {
        button.classList.add("activeType");
      }
      button.addEventListener("click", async (e) => {
        // Remove active class from all buttons
        typeButtons.forEach((btn) => btn.classList.remove("activeType"));

        // Add active class to clicked button
        const clickedButton = e.currentTarget as HTMLButtonElement;
        clickedButton.classList.add("activeType");

        // Get the type from the image source
        const imgSrc = clickedButton.querySelector("img")?.src || "";
        activeType = imgSrc.includes("todos.png")
          ? "all"
          : imgSrc.match(/types_icons\/(.+)\.png/)?.[1] || "all";

        // Filter Pokemon by type
        if (!pokemonGrid) return;

        // Clear current grid
        pokemonGrid.innerHTML = "";

        try {
          if (activeType === "all") {
            // Load initial pokemon set
            const pokemons = await fetchPokemonData(1);
            pokemons.forEach((pokemon) => {
              const card = createPokemonCard(pokemon);
              if (card) pokemonGrid.appendChild(card);
            });

            // Show load more button for "all" view
            if (loadMoreButton) {
              loadMoreButton.style.display = "block";
              currentPage = 1;
            }
          } else {
            // Hide load more button for filtered view
            if (loadMoreButton) {
              loadMoreButton.style.display = "none";
            }

            // Fetch pokemon by type
            const response = await fetch(
              `https://pokeapi.co/api/v2/type/${activeType}`
            );
            const data = await response.json();
            const spanishTypeName = typeTranslations[activeType] || activeType;
            // Filter to only get first 151 Pokemon
            const typePokemons = data.pokemon
              .map((p) => {
                const id = parseInt(p.pokemon.url.split("/").slice(-2, -1)[0]);
                return { id, url: p.pokemon.url };
              })
              .filter((p) => p.id <= TOTAL_POKEMONS);

            // Check if any Pokemon were found
            if (typePokemons.length === 0) {
              const noResultsMessage = `
                <div class="col-span-full text-center py-8">
                  <p class="text-xl text-gray-600">No se encontraron Pokémon de tipo ${spanishTypeName}.</p>
                  <p class="text-gray-500 mt-2">Prueba con otro tipo de Pokémon.</p>
                </div>
              `;
              pokemonGrid.innerHTML = noResultsMessage;
              return;
            }

            // Fetch and display each Pokemon of the selected type
            for (const pokemon of typePokemons) {
              const response = await fetch(
                `https://pokeapi.co/api/v2/pokemon/${pokemon.id}`
              );
              const pokemonData = await response.json();

              const formattedPokemon = {
                id: pokemonData.id,
                name:
                  pokemonData.name.charAt(0).toUpperCase() +
                  pokemonData.name.slice(1),
                image:
                  pokemonData.sprites.other["official-artwork"].front_default ||
                  pokemonData.sprites.front_default,
                type: pokemonData.types.map(
                  (type) => typeTranslations[type.type.name] || type.type.name
                ),
              };

              const card = createPokemonCard(formattedPokemon);
              if (card) pokemonGrid.appendChild(card);
            }
          }
        } catch (error) {
          console.error("Error filtering Pokemon:", error);
          pokemonGrid.innerHTML = `
      <div class="col-span-full text-center py-8">
        <p class="text-xl text-red-500">Error al cargar los Pokémon.</p>
        <p class="text-gray-500 mt-2">Por favor, inténtalo de nuevo.</p>
      </div>
    `;
        }
      });
    });
  }

  // Add event listener to the button
  if (loadMoreButton) {
    loadMoreButton.addEventListener("click", handleLoadMore);
  }

  async function fetchPokemonData(start: number, options = { isType: false }) {
    try {
      if (options.isType) {
        const response = await fetch(`https://pokeapi.co/api/v2/type`);
        const data = await response.json();
        return data;
      }

      const pokemons = [];
      const limit = ITEMS_PER_PAGE;

      for (let i = start; i < start + limit && i <= TOTAL_POKEMONS; i++) {
        const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${i}`);
        const data = await response.json();

        pokemons.push({
          id: data.id,
          name: data.name.charAt(0).toUpperCase() + data.name.slice(1),
          image:
            data.sprites.other["official-artwork"].front_default ||
            data.sprites.front_default,
          type: data.types.map(
            (type) => typeTranslations[type.type.name] || type.type.name
          ),
        });
      }
      return pokemons;
    } catch (error) {
      console.error("Error fetching Pokemon data:", error);
      return [];
    }
  }

  function createPokemonCard(pokemon) {
    const firstType = pokemon.type[0]?.toLowerCase();
    const gradientClass =
      firstType && typeGradients[firstType]
        ? typeGradients[firstType]
        : "from-blue-400 to-purple-500";

    const cardHTML = `
      <div class="pokemon-card w-full h-full p-2">
        <a href="/pokemon/${pokemon.id}" class="group w-full h-full bg-white rounded-xl shadow-md flex flex-col overflow-hidden items-center justify-center">
          <div class="relative w-full h-40 mb-24 bg-gradient-to-r ${gradientClass}">
            <div class="absolute left-1/2 -bottom-16 -translate-x-1/2">
              <div class="relative w-48 h-48">
                <div
                  class="group-hover:scale-110 transition-all duration-150 absolute inset-0 rounded-full bg-white shadow-lg z-10"
                >
                </div>
                <div
                  class="group-hover:scale-125 transition-all duration-150 absolute inset-2 rounded-full overflow-hidden z-20"
                >
                  <img
                    transition:persist
                    transition:name=pokemon-image-${pokemon.id}
                    src=${pokemon.image}
                    alt=${pokemon.name}
                    class="w-full h-full object-cover p-6"
                  />
                </div>
              </div>
            </div>
          </div>
          <div class="pb-4 text-center">
            <h2 class="text-xl font-bold mb-2">${pokemon.name}</h2>
            <p class="text-gray-600 flex-grow">Tipo: ${pokemon.type.join(", ")}</p>
          </div>
        </a>
      </div>
    `;

    const temp = document.createElement("div");
    temp.innerHTML = cardHTML;
    return temp.firstElementChild;
  }

  async function handleLoadMore() {
    if (!loadMoreButton || !pokemonGrid) return;

    // Add loading state
    loadMoreButton.classList.add("loading");
    loadMoreButton.disabled = true;

    const nextPage = currentPage + 1;
    const start = (nextPage - 1) * ITEMS_PER_PAGE + 1;

    try {
      const newPokemons = await fetchPokemonData(start);

      newPokemons.forEach((pokemon) => {
        const card = createPokemonCard(pokemon);
        if (card) pokemonGrid.appendChild(card);
      });

      currentPage = nextPage;

      // Hide button if we've loaded all Pokémon
      if (start + ITEMS_PER_PAGE > TOTAL_POKEMONS) {
        loadMoreButton.style.display = "none";
      }
    } catch (error) {
      console.error("Error loading more Pokémon:", error);
    } finally {
      // Remove loading state
      loadMoreButton.classList.remove("loading");
      loadMoreButton.disabled = false;
    }
  }
  const dropdownToggle = document.getElementById("dropdown-toggle");
  const optionsMenu = document.getElementById("options-menu");
  const optionButtons = document.querySelectorAll(".option-btn");

  // Add the dropdown toggle click handler
  if (dropdownToggle) {
    dropdownToggle.addEventListener("click", () => {
      optionsMenu?.classList.toggle("hidden");
    });
  }

  // Handle option button clicks
  optionButtons.forEach((button) => {
    button.addEventListener("click", () => {
      if (dropdownToggle) {
        // Get the span element from the clicked button
        const buttonSpan = button.querySelector("span");
        // Get the English version from the ID
        const englishType = buttonSpan?.id || "todos";

        const dropdownImage = dropdownToggle.querySelector(
          "#dropdown-general-image"
        );
        const dropdownSpan = dropdownToggle.querySelector("span");

        if (dropdownImage instanceof HTMLImageElement) {
          // Use the English type name for the image path
          dropdownImage.src = `/img/types_icons/${englishType}.png`;
        }

        if (dropdownSpan) {
          // Keep showing the Spanish translation in the text
          dropdownSpan.textContent =
            buttonSpan?.textContent || "Seleccionar tipo";
        }
      }

      // Hide the dropdown
      optionsMenu?.classList.add("hidden");
    });
  });
</script>
